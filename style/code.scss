@import "util";

pre, code {
	background: var(--background-code);
    font-size: 1.1em;
    line-height: 1.4em;
}

code {
    padding: 0.1em 0.2em 0.2em;
    vertical-align: text-bottom;
}

pre {
	padding: 1em 1.5em;
	overflow-x: auto;
	color: #659FBF;
}


// https://highlightjs.readthedocs.io/en/latest/css-classes-reference.html
$syntax-highlighting: (
	// ID: (dark, light) // real.name
	keyword: (#309eb3, inherit),
	"constant,builtin,boolean": (#0086FF, inherit),
	"attr,property,params": (#657dbf, inherit),
	class: (#5eb593, inherit),
	"function,decorator": (#207698, inherit),
	"string,regex": (#0fb1fc, inherit),
	number: (#75c8b1, inherit),
	operator: (var(--color-3), var(--color-3)),
	punctuation: (var(--color-3), var(--color-3)),
	comment: (#47556e, inherit),
	doctag: (#1a72bd, inherit),
);

@mixin color($name, $color, $force: false) {
	@if $color != inherit or $force {
		$scopes-list: str-split(unquote($name), ",");
		$selectors: "";
		@each $scopes-str in $scopes-list {
			$classes: "";
			$scopes: str-split($scopes-str, ".");
			$i: 0;
			@each $scope in $scopes {
				$classes: $classes + "." + $scope;
				// @for $_ from 0 to $i {
				// 	$classes: $classes + "_";
				// }
				$i: $i + 1;
			}
			
			$selectors: $selectors + ", ." + str-slice($classes, 2);
			
		}
		
		#{str-slice($selectors, 3)} {
			color: $color;
		}
	}
}

@each $name, $colors in $syntax-highlighting {
	@include color($name, nth($colors, 1));
}

@media (prefers-color-scheme: light) {
	@each $name, $colors in $syntax-highlighting {
		@include color($name, nth($colors, 2), nth($colors, 1) != inherit);
	}
}
